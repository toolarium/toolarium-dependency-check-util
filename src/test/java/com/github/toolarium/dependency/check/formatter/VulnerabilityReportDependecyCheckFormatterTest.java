/*
 * VulnerabilityReportDependecyCheckFormatterTest.java
 *
 * Copyright by toolarium, all rights reserved.
 */
package com.github.toolarium.dependency.check.formatter;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import com.github.toolarium.dependency.check.DependencyCheckUtil;
import com.github.toolarium.dependency.check.DependencyCheckUtilTest;
import com.github.toolarium.dependency.check.formatter.impl.VulnerabilityReportDependecyCheckFormatter;
import com.github.toolarium.dependency.check.model.DependecyCheckResult;
import com.github.toolarium.dependency.check.report.Dependency;
import com.github.toolarium.dependency.check.report.VulnerabilityReport;
import java.io.IOException;
import java.nio.file.Paths;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Test the {@link VulnerabilityConverter}.
 *  
 * @author patrick
 */
public class VulnerabilityReportDependecyCheckFormatterTest {
    private static final String HIGHEST = "HIGHEST";
    private static final String HIGH = "HIGH";
    private static final String NVD = "NVD";
    private static final String ANNOTATION_PROCESSOR = "annotationProcessor";
    private static final Logger LOG = LoggerFactory.getLogger(VulnerabilityReportDependecyCheckFormatterTest.class);
    
    
    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void convertTest() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.FULL_REPORT_1_VULNERABLE).toFile());
        assertNotNull(dependecyCheckResult);
        
        VulnerabilityReport vulnerabilityResult = new VulnerabilityReportDependecyCheckFormatter().format(dependecyCheckResult); 
        assertNotNull(vulnerabilityResult);
        
        LOG.debug("" + vulnerabilityResult);
        assertEquals("2024-01-01T12:41:44.823341200Z", vulnerabilityResult.getReportDate());
        assertEquals("com.github.toolarium:toolarium-system-command:0.9.1-SNAPSHOT", vulnerabilityResult.getProjectArtifact().toArtifactId());
        assertEquals("[annotationProcessor]", vulnerabilityResult.getVulnerabilityConfigurations().toString());
        assertEquals(1, vulnerabilityResult.getVulnerabilities(ANNOTATION_PROCESSOR).size());
        assertJacksonDataBund_2_15_3_Issue("toolarium-system-command", vulnerabilityResult.getVulnerabilities(ANNOTATION_PROCESSOR).get(0));
    }


    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void complexTest() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.FULL_REPORT_MULTIPLE_VULNERABILITIES).toFile());
        assertNotNull(dependecyCheckResult);
        
        VulnerabilityReport vulnerabilityResult = new VulnerabilityReportDependecyCheckFormatter().format(dependecyCheckResult); 
        assertNotNull(vulnerabilityResult);
        
        assertEquals("2024-01-02T08:28:48.258279700Z", vulnerabilityResult.getReportDate());
        assertEquals("com.github.toolarium:toolarium-common:0.4.1-SNAPSHOT", vulnerabilityResult.getProjectArtifact().toArtifactId());
        assertEquals("[compileClasspath, annotationProcessor, runtimeClasspath]", vulnerabilityResult.getVulnerabilityConfigurations().toString());
        
        assertEquals(1, vulnerabilityResult.getVulnerabilities(ANNOTATION_PROCESSOR).size());
        assertJacksonDataBund_2_15_3_Issue("toolarium-common", vulnerabilityResult.getVulnerabilities(ANNOTATION_PROCESSOR).get(0));
        
        assertEquals(2, vulnerabilityResult.getVulnerabilities("compileClasspath").size());
        assertJacksonDataBund_2_13_2_1_Issue("toolarium-common", vulnerabilityResult.getVulnerabilities("compileClasspath").get(0));
        assertLog4j_1_2_17_Issue("toolarium-common", vulnerabilityResult.getVulnerabilities("compileClasspath").get(1));
        
        assertEquals(2, vulnerabilityResult.getVulnerabilities("runtimeClasspath").size());
        assertJacksonDataBund_2_13_2_1_Issue("toolarium-common", vulnerabilityResult.getVulnerabilities("runtimeClasspath").get(0));
        assertLog4j_1_2_17_Issue("toolarium-common", vulnerabilityResult.getVulnerabilities("runtimeClasspath").get(1));
    }


    /**
     * Assert jackson bind issue
     *
     * @param pacakgeName the package name
     * @param dependency the dependency to check
     */
    private void assertJacksonDataBund_2_15_3_Issue(String pacakgeName, Dependency dependency) {
        assertEquals("jackson-databind-2.15.3.jar", dependency.getFilename());
        assertEquals("com.fasterxml.jackson.core:jackson-databind:2.15.3", dependency.getDependencyArtifact().toArtifactId());
        assertEquals(HIGH, dependency.getConfidence());
        assertEquals("https://ossindex.sonatype.org/component/pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.15.3?utm_source=dependency-check&utm_medium=integration&utm_content=9.0.6", 
                     dependency.getUrl());
        assertEquals("General data-binding functionality for Jackson: works on core streaming API", dependency.getPackageDescription());
        assertEquals("The Apache Software License, Version 2.0: https://www.apache.org/licenses/LICENSE-2.0.txt", dependency.getPackageLicence());

        assertEquals(1, dependency.getProjectReferenceList().size());
        assertEquals(pacakgeName, dependency.getProjectReferenceList().get(0));
        
        assertEquals(1, dependency.getIncludedByReferenceList().size());
        assertEquals("com.github.toolarium:toolarium-enum-configuration:1.1.8", dependency.getIncludedByReferenceList().get(0).toArtifactId());

        assertEquals(1, dependency.getVulnerabilityList().size());

        assertEquals("CVE-2023-35116", dependency.getVulnerabilityList().get(0).getCve());
        assertEquals("MEDIUM", dependency.getVulnerabilityList().get(0).getSeverity());
        assertEquals(NVD, dependency.getVulnerabilityList().get(0).getSource());
        assertEquals(4.7d, dependency.getVulnerabilityList().get(0).getScore());
        assertEquals("jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. "
                     + "NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize "
                     + "it cannot be achieved by an external attacker.", 
                     dependency.getVulnerabilityList().get(0).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(0).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Afasterxml&cpe_product=cpe"
                     + "%3A%2F%3Afasterxml%3Ajackson-databind&cpe_version=cpe%3A%2F%3Afasterxml%3Ajackson-databind%3A2.15.3", 
                     dependency.getVulnerabilityList().get(0).getUrl());
        assertEquals("2.16.0", dependency.getVulnerabilityList().get(0).getEndExcludingVersion());
    }


    /**
     * Assert jackson bind issue
     *
     * @param pacakgeName the package name
     * @param dependency the dependency to check
     */
    private void assertJacksonDataBund_2_13_2_1_Issue(String pacakgeName, Dependency dependency) {
        assertEquals("jackson-databind-2.13.2.1.jar", dependency.getFilename());
        assertEquals("com.fasterxml.jackson.core:jackson-databind:2.13.2.1", dependency.getDependencyArtifact().toArtifactId());
        assertEquals(HIGH, dependency.getConfidence());
        assertEquals("https://ossindex.sonatype.org/component/pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.2.1?utm_source=dependency-check&utm_medium=integration&utm_content=9.0.6", 
                     dependency.getUrl());
        assertEquals("General data-binding functionality for Jackson: works on core streaming API", dependency.getPackageDescription());
        assertEquals("The Apache Software License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt", dependency.getPackageLicence());

        assertEquals(1, dependency.getProjectReferenceList().size());
        assertEquals(pacakgeName, dependency.getProjectReferenceList().get(0));
        
        assertEquals(2, dependency.getIncludedByReferenceList().size());
        assertEquals("com.github.toolarium:toolarium-common:0.4.1-SNAPSHOT", dependency.getIncludedByReferenceList().get(0).toArtifactId());
        assertEquals("com.fasterxml.jackson.core:jackson-databind:2.13.2.1", dependency.getIncludedByReferenceList().get(1).toArtifactId());
        
        assertEquals(3, dependency.getVulnerabilityList().size());
        assertEquals("CVE-2022-42003", dependency.getVulnerabilityList().get(0).getCve());
        assertEquals("2.13.4.1", dependency.getVulnerabilityList().get(0).getEndExcludingVersion());
        assertEquals(HIGH, dependency.getVulnerabilityList().get(0).getSeverity());
        assertEquals(NVD, dependency.getVulnerabilityList().get(0).getSource());
        assertEquals(7.5d, dependency.getVulnerabilityList().get(0).getScore());
        assertEquals("In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep "
                     + "wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled.", 
                     dependency.getVulnerabilityList().get(0).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(0).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Afasterxml&cpe_product=cpe"
                     + "%3A%2F%3Afasterxml%3Ajackson-databind&cpe_version=cpe%3A%2F%3Afasterxml%3Ajackson-databind%3A2.13.2.1",
                     dependency.getVulnerabilityList().get(0).getUrl());

        assertEquals("CVE-2022-42004", dependency.getVulnerabilityList().get(1).getCve());
        assertEquals("2.13.4", dependency.getVulnerabilityList().get(1).getEndExcludingVersion());
        assertEquals(HIGH, dependency.getVulnerabilityList().get(1).getSeverity());
        assertEquals("In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested "
                     + "arrays. An application is vulnerable only with certain customized choices for deserialization.", 
                     dependency.getVulnerabilityList().get(1).getDescription());        
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(1).getConfidence());
        assertEquals(NVD, dependency.getVulnerabilityList().get(0).getSource());
        assertEquals(7.5d, dependency.getVulnerabilityList().get(0).getScore());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Afasterxml&cpe_product=cpe"
                     + "%3A%2F%3Afasterxml%3Ajackson-databind&cpe_version=cpe%3A%2F%3Afasterxml%3Ajackson-databind%3A2.13.2.1",
                     dependency.getVulnerabilityList().get(1).getUrl());

        assertEquals("CVE-2023-35116", dependency.getVulnerabilityList().get(2).getCve());
        assertEquals("2.16.0", dependency.getVulnerabilityList().get(2).getEndExcludingVersion());
        assertEquals("MEDIUM", dependency.getVulnerabilityList().get(2).getSeverity());
        assertEquals("jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's "
                     + "perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.", 
                     dependency.getVulnerabilityList().get(2).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(2).getConfidence());
        assertEquals(NVD, dependency.getVulnerabilityList().get(0).getSource());
        assertEquals(4.7d, dependency.getVulnerabilityList().get(2).getScore());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Afasterxml&cpe_product=cpe"
                     + "%3A%2F%3Afasterxml%3Ajackson-databind&cpe_version=cpe%3A%2F%3Afasterxml%3Ajackson-databind%3A2.13.2.1",
                     dependency.getVulnerabilityList().get(2).getUrl());
    }


    /**
     * Assert jackson bind issue
     *
     * @param pacakgeName the package name
     * @param dependency the dependency to check
     */
    private void assertLog4j_1_2_17_Issue(String pacakgeName, Dependency dependency) {
        assertEquals("log4j-1.2.17.jar", dependency.getFilename());
        assertEquals("log4j:log4j:1.2.17", dependency.getDependencyArtifact().toArtifactId());
        assertEquals(HIGH, dependency.getConfidence());
        assertEquals("https://ossindex.sonatype.org/component/pkg:maven/log4j/log4j@1.2.17?utm_source=dependency-check&utm_medium=integration&utm_content=9.0.6", 
                     dependency.getUrl());
        assertEquals("Apache Log4j 1.2", dependency.getPackageDescription());
        assertEquals("The Apache Software License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt", dependency.getPackageLicence());

        assertEquals(1, dependency.getProjectReferenceList().size());
        assertEquals(pacakgeName, dependency.getProjectReferenceList().get(0));
        
        assertEquals(1, dependency.getIncludedByReferenceList().size());
        assertEquals("com.github.toolarium:toolarium-common:0.4.1-SNAPSHOT", dependency.getIncludedByReferenceList().get(0).toArtifactId());

        int idx = 0;
        assertEquals(7, dependency.getVulnerabilityList().size());
        assertEquals("CVE-2019-17571", dependency.getVulnerabilityList().get(idx).getCve());
        assertNull(dependency.getVulnerabilityList().get(idx).getEndExcludingVersion());
        assertEquals("CRITICAL", dependency.getVulnerabilityList().get(idx).getSeverity());
        assertEquals(NVD, dependency.getVulnerabilityList().get(idx).getSource());
        assertEquals(9.8d, dependency.getVulnerabilityList().get(idx).getScore());
        assertEquals("Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a "
                     + "deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17.", 
                     dependency.getVulnerabilityList().get(idx).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(idx).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Alog4j&cpe_version=cpe"
                     + "%3A%2F%3Aapache%3Alog4j%3A1.2.17", dependency.getVulnerabilityList().get(idx).getUrl());

        idx++;
        assertEquals(7, dependency.getVulnerabilityList().size());
        assertEquals("CVE-2020-9493", dependency.getVulnerabilityList().get(idx).getCve());
        assertEquals("2.0", dependency.getVulnerabilityList().get(idx).getEndExcludingVersion());
        assertEquals("CRITICAL", dependency.getVulnerabilityList().get(idx).getSeverity());
        assertEquals(NVD, dependency.getVulnerabilityList().get(idx).getSource());
        assertEquals(9.8d, dependency.getVulnerabilityList().get(idx).getScore());
        assertEquals("A deserialization flaw was found in Apache Chainsaw versions prior to 2.1.0 which could lead to malicious code execution.", 
                     dependency.getVulnerabilityList().get(idx).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(idx).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Alog4j&cpe_version=cpe%"
                     + "3A%2F%3Aapache%3Alog4j%3A1.2.17", dependency.getVulnerabilityList().get(idx).getUrl());
        
        idx++;
        assertEquals(7, dependency.getVulnerabilityList().size());
        assertEquals("CVE-2022-23305", dependency.getVulnerabilityList().get(idx).getCve());
        assertNull(dependency.getVulnerabilityList().get(idx).getEndExcludingVersion());
        assertEquals("CRITICAL", dependency.getVulnerabilityList().get(idx).getSeverity());
        assertEquals(NVD, dependency.getVulnerabilityList().get(idx).getSource());
        assertEquals(9.8d, dependency.getVulnerabilityList().get(idx).getScore());
        assertEquals("By design, the JDBCAppender in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from PatternLayout. The message converter, %m, is likely "
                     + "to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to "
                     + "be executed. Note this issue only affects Log4j 1.x when specifically configured to use the JDBCAppender, which is not the default. Beginning in version 2.0-beta8, the JDBCAppender "
                     + "was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs. Apache Log4j 1.2 reached end of life in August 2015. Users "
                     + "should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.", 
                     dependency.getVulnerabilityList().get(idx).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(idx).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Alog4j&cpe_version=cpe%3A%2F%3Aapache%3Alog4j%3A1.2.17",
                     dependency.getVulnerabilityList().get(idx).getUrl());

        idx++;
        assertEquals(7, dependency.getVulnerabilityList().size());
        assertEquals("CVE-2022-23302", dependency.getVulnerabilityList().get(idx).getCve());
        assertNull(dependency.getVulnerabilityList().get(idx).getEndExcludingVersion());
        assertEquals(HIGH, dependency.getVulnerabilityList().get(idx).getSeverity());
        assertEquals(NVD, dependency.getVulnerabilityList().get(idx).getSource());
        assertEquals(8.8d, dependency.getVulnerabilityList().get(idx).getScore());
        assertEquals("JMSSink in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP "
                     + "service the attacker has access to. The attacker can provide a TopicConnectionFactoryBindingName configuration causing JMSSink to perform JNDI requests that result in remote code execution in a "
                     + "similar fashion to CVE-2021-4104. Note this issue only affects Log4j 1.x when specifically configured to use JMSSink, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. "
                     + "Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.", 
                     dependency.getVulnerabilityList().get(idx).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(idx).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Alog4j&cpe_version=cpe%3A%2F%3Aapache%3Alog4j%3A1.2.17",
                     dependency.getVulnerabilityList().get(idx).getUrl());

        idx++;
        assertEquals(7, dependency.getVulnerabilityList().size());
        assertEquals("CVE-2022-23307", dependency.getVulnerabilityList().get(idx).getCve());
        assertEquals("2.0", dependency.getVulnerabilityList().get(idx).getEndExcludingVersion());
        assertEquals(HIGH, dependency.getVulnerabilityList().get(idx).getSeverity());
        assertEquals(NVD, dependency.getVulnerabilityList().get(idx).getSource());
        assertEquals(8.8d, dependency.getVulnerabilityList().get(idx).getScore());
        assertEquals("CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.", 
                     dependency.getVulnerabilityList().get(idx).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(idx).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Alog4j&cpe_version=cpe%3A%2F%3Aapache%3Alog4j%3A1.2.17",
                     dependency.getVulnerabilityList().get(idx).getUrl());

        idx++;
        assertEquals(7, dependency.getVulnerabilityList().size());
        assertEquals("CVE-2021-4104", dependency.getVulnerabilityList().get(idx).getCve());
        assertNull(dependency.getVulnerabilityList().get(idx).getEndExcludingVersion());
        assertEquals(HIGH, dependency.getVulnerabilityList().get(idx).getSeverity());
        assertEquals("OSSINDEX", dependency.getVulnerabilityList().get(idx).getSource());
        assertEquals(7.5d, dependency.getVulnerabilityList().get(idx).getScore());
        assertEquals("JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration. The attacker can provide TopicBindingName and "
                     + "TopicConnectionFactoryBindingName configurations causing JMSAppender to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-44228. Note this issue "
                     + "only affects Log4j 1.2 when specifically configured to use JMSAppender, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it "
                     + "addresses numerous other issues from the previous versions.\n\n"
                     + "Sonatype's research suggests that this CVE's details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2021-4104 for details", 
                     dependency.getVulnerabilityList().get(idx).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(idx).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Alog4j&cpe_version=cpe%3A%2F%3Aapache%3Alog4j%3A1.2.17",
                     dependency.getVulnerabilityList().get(idx).getUrl());

        idx++;
        assertEquals(7, dependency.getVulnerabilityList().size());
        assertEquals("CVE-2023-26464", dependency.getVulnerabilityList().get(idx).getCve());
        assertEquals("2.0", dependency.getVulnerabilityList().get(idx).getEndExcludingVersion());
        assertEquals(HIGH, dependency.getVulnerabilityList().get(idx).getSeverity());
        assertEquals(NVD, dependency.getVulnerabilityList().get(idx).getSource());
        assertEquals(7.5d, dependency.getVulnerabilityList().get(idx).getScore());
        assertEquals("** UNSUPPORTED WHEN ASSIGNED **\n\nWhen using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a "
                     + "specially-crafted (ie, deeply nested) \nhashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and "
                     + "achieve Denial of Service when the object is deserialized.\n\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x.\n\n"
                     + "NOTE: This vulnerability only affects products that are no longer supported by the maintainer.\n\n\n\n\n",
                     dependency.getVulnerabilityList().get(idx).getDescription());
        assertEquals(HIGHEST, dependency.getVulnerabilityList().get(idx).getConfidence());
        assertEquals("https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Alog4j&cpe_version=cpe%3A%2F%3Aapache%3Alog4j%3A1.2.17",
                     dependency.getVulnerabilityList().get(idx).getUrl());
    }
}

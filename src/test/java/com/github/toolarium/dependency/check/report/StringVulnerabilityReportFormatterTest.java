/*
 * StringVulnerabilityReportFormatterTest.java
 *
 * Copyright by toolarium, all rights reserved.
 */
package com.github.toolarium.dependency.check.report;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.github.toolarium.common.util.TextUtil;
import com.github.toolarium.dependency.check.DependencyCheckUtil;
import com.github.toolarium.dependency.check.DependencyCheckUtilTest;
import com.github.toolarium.dependency.check.model.DependecyCheckResult;
import com.github.toolarium.dependency.check.report.format.VulnerabilityReportFormatterFactory;
import com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter;
import java.io.IOException;
import java.nio.file.Paths;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Test the {@link StringVulnerabilityReportFormatter}.
 *  
 * @author patrick
 */
public class StringVulnerabilityReportFormatterTest {
    private static final String CR = "\r";
    private static final Logger LOG = LoggerFactory.getLogger(StringVulnerabilityReportFormatterTest.class);

    
    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void formatSimpleReport() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.SAMPLE).toFile());
        assertNotNull(dependecyCheckResult);
        assertTrue(DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, VulnerabilityReportFormatterFactory.getInstance().getStringFormatter(), new String[] {"annotationProcessor"}).isEmpty());
    }

    
    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void formatSimpleVulnerabilityReport() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.FULL_REPORT_1_VULNERABLE).toFile());
        assertNotNull(dependecyCheckResult);
        
        StringVulnerabilityReportFormatter f = VulnerabilityReportFormatterFactory.getInstance().getStringFormatter();
        f.setEnableDependencyUrl(true);
        String result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, f)) {
            result += s;
        }
        LOG.debug(TextUtil.NL + result);
        
        String ref = 
                  " > annotationProcessor:                                                                                                                  \n"
                + "   + com.fasterxml.jackson.core:jackson-databind:2.15.3 (confidence:HIGH)                                                                \n"
                + "     - CVE       CVE-2023-35116                                                                                                          \n"
                + "     - Severity  MEDIUM, 4.7, NVD -> fixed by 2.16.0                                                                                     \n"
                + "     - Included  toolarium-enum-configuration:1.1.8                                                                                      \n"
                + "     - Reason    jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted \n"
                + "                 object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report,  \n"
                + "                 because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external  \n"
                + "                 attacker.                                                                                                               \n"
                + "     - Dep.-Ref  https://ossindex.sonatype.org/component/pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.15.3?utm_source=dependency-check&utm_medium=integration&utm_content=9.0.6\n"
                + "     - Vul.-Ref  https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Afasterxml&cpe_product=cpe%3A%2F%3Afasterxml%3Ajackson-databind&cpe_version=cpe%3A%2F%3Afasterxml%3Ajackson-databind%3A2.15.3\n"
                + "";
        assertEquals(ref.replaceAll(CR, ""), result.replaceAll(CR, ""));

        f.setBreakUrl(true);
        result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, f)) {
            result += s;
        }
        LOG.debug(TextUtil.NL + result);
        
        ref = 
                  " > annotationProcessor:                                                                                                                  \n"
                + "   + com.fasterxml.jackson.core:jackson-databind:2.15.3 (confidence:HIGH)                                                                \n"
                + "     - CVE       CVE-2023-35116                                                                                                          \n"
                + "     - Severity  MEDIUM, 4.7, NVD -> fixed by 2.16.0                                                                                     \n"
                + "     - Included  toolarium-enum-configuration:1.1.8                                                                                      \n"
                + "     - Reason    jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted \n"
                + "                 object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report,  \n"
                + "                 because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external  \n"
                + "                 attacker.                                                                                                               \n"
                + "     - Dep.-Ref  https://ossindex.sonatype.org/component/pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.15.3?utm_source=dependen\n"
                + "                 cy-check&utm_medium=integration&utm_content=9.0.6                                                                       \n"
                + "     - Vul.-Ref  https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3\n"
                + "                 Afasterxml&cpe_product=cpe%3A%2F%3Afasterxml%3Ajackson-databind&cpe_version=cpe%3A%2F%3Afasterxml%3Ajackson-databind%3A2\n"
                + "                 .15.3                                                                                                                   \n"
                + "";
        
        assertEquals(ref.replaceAll(CR, ""), result.replaceAll(CR, ""));

        
        result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, f.setEnableReason(false).setEnableReason(false).setEnableDependencyUrl(false).setEnableVulnerabilityUrl(false))) {
            result += s + TextUtil.NL;
        }
        
        ref = " > annotationProcessor:                                                                                                                  \n"
            + "   + com.fasterxml.jackson.core:jackson-databind:2.15.3 (confidence:HIGH)                                                                \n"
            + "     - CVE       CVE-2023-35116                                                                                                          \n"
            + "     - Severity  MEDIUM, 4.7, NVD -> fixed by 2.16.0                                                                                     \n"
            + "     - Included  toolarium-enum-configuration:1.1.8                                                                                      \n"
            + TextUtil.NL
            + "";
                
        
        LOG.debug(TextUtil.NL + result);
        assertEquals(ref, result);
    }

    
    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void formatMoreComplexCase() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.FULL_REPORT_MULTIPLE_VULNERABILITIES).toFile());
        assertNotNull(dependecyCheckResult);

        DependecyCheckResult simplifiedDependecyCheckResult = DependencyCheckUtil.getInstance().filter(DependencyCheckUtil.getInstance().simplify(dependecyCheckResult));
        assertNotNull(simplifiedDependecyCheckResult);
        
        LOG.debug("" + DependencyCheckUtil.getInstance().toJsonString(simplifiedDependecyCheckResult));


        
        String result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, VulnerabilityReportFormatterFactory.getInstance().getStringFormatter())) {
            result += s + TextUtil.NL;
        }
        LOG.debug(TextUtil.NL + result);
    }


    /**
     * Test modelGenarator 
     *
     * @throws IOException In case of a file error
     */
    @Test
    public void testModelGenarator() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.FULL_REPORT_MULTIPLE_VULNERABILITIES_CVSSV2).toFile());
        assertNotNull(dependecyCheckResult);
        
        StringVulnerabilityReportFormatter f = VulnerabilityReportFormatterFactory.getInstance().getStringFormatter();
        f.setEnableDependencyUrl(true);
        f.setMaxTextLen(72);
        
        String result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, f)) {
            result += s;
        }
        LOG.debug(TextUtil.NL + result);
        
        String ref = 
                  " > modelGenerator:                                                                       \n"
                + "   + dom4j:dom4j:1.6.1 (confidence:HIGH)                                                 \n"
                + "     - CVE       CVE-2020-10683, CVE-2018-1000632                                        \n"                                     
                + "     - Severity  CRITICAL, 9.8, NVD -> fixed by 2.0.3                                    \n"                                    
                + "     - Included  poi-ooxml:3.9                                                           \n"                                                           
                + "     - Reason    dom4j before 2.0.3 and 2.1.x before 2.1.3 allows external DTDs and      \n"      
                + "                 External Entities by default, which might enable XXE attacks. However,  \n"  
                + "                 there is popular external documentation from OWASP showing how to       \n"       
                + "                 enable the safe, non-default behavior in any application that uses      \n"      
                + "                 dom4j.                                                                  \n"
                + "     - Dep.-Ref  https://ossindex.sonatype.org/component/pkg:maven/dom4j/dom4j@1.6.1?utm_source=dependency-check&utm_medium=integration&utm_content=12.0.1\n"
                + "     - Vul.-Ref  https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Adom4j_project&cpe_product=cpe%3A%2F%3Adom4j_project%3Adom4j&cpe_version=cpe%3A%2F%3Adom4j_project%3Adom4j%3A1.6.1\n"
                + "\n" 
                + "   + org.zenframework.z8.dependencies.commons:dom4j-1.6.1:2.0 (confidence:HIGHEST)       \n"
                + "     - CVE       CVE-2020-10683, CVE-2018-1000632                                        \n"      
                + "     - Severity  CRITICAL, 9.8, NVD -> fixed by 2.0.3                                    \n"     
                + "     - Included  poi-ooxml:3.9                                                           \n"    
                + "     - Reason    dom4j before 2.0.3 and 2.1.x before 2.1.3 allows external DTDs and      \n" 
                + "                 External Entities by default, which might enable XXE attacks. However,  \n"
                + "                 there is popular external documentation from OWASP showing how to       \n"
                + "                 enable the safe, non-default behavior in any application that uses      \n"
                + "                 dom4j.                                                                  \n"
                + "     - Dep.-Ref  https://ossindex.sonatype.org/component/pkg:maven/org.zenframework.z8.dependencies.commons/dom4j-1.6.1@2.0?utm_source=dependency-check&utm_medium=integration&utm_content=12.0.1\n"
                + "     - Vul.-Ref  https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Adom4j_project&cpe_product=cpe%3A%2F%3Adom4j_project%3Adom4j&cpe_version=cpe%3A%2F%3Adom4j_project%3Adom4j%3A1.6.1\n"
                + "\n"
                + "   + org.apache.poi:poi:3.9 (confidence:HIGH)                                            \n"
                + "     - CVE       CVE-2017-12626, CVE-2016-5000, CVE-2017-5644, CVE-2019-12415,           \n"
                + "                 CVE-2022-26336, CVE-2014-9527, CVE-2014-3529, CVE-2014-3574             \n"
                + "     - Severity  HIGH, 7.5, NVD -> fixed by 3.17                                         \n"
                + "     - Included  poi-ooxml:3.9, toolarium-java-memory:0.0.1-SNAPSHOT                     \n"
                + "     - Reason    Apache POI in versions prior to release 3.17 are vulnerable to Denial   \n"
                + "                 of Service Attacks: 1) Infinite Loops while parsing crafted WMF, EMF,   \n"
                + "                 MSG and macros (POI bugs 61338 and 61294), and 2) Out of Memory         \n"
                + "                 Exceptions while parsing crafted DOC, PPT and XLS (POI bugs 52372 and   \n"
                + "                 61295).                                                                 \n"
                + "     - Dep.-Ref  https://ossindex.sonatype.org/component/pkg:maven/org.apache.poi/poi@3.9?utm_source=dependency-check&utm_medium=integration&utm_content=12.0.1\n"
                + "     - Vul.-Ref  https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Apoi&cpe_version=cpe%3A%2F%3Aapache%3Apoi%3A3.9\n"
                + "\n" 
                + "   + org.apache.poi:poi-ooxml:3.9 (confidence:HIGH)                                      \n"
                + "     - CVE       CVE-2017-12626, CVE-2016-5000, CVE-2017-5644, CVE-2019-12415,           \n"
                + "                 CVE-2022-26336, CVE-2014-9527, CVE-2014-3529, CVE-2014-3574             \n"
                + "     - Severity  HIGH, 7.5, NVD -> fixed by 3.17                                         \n"
                + "     - Included  toolarium-java-memory:0.0.1-SNAPSHOT                                    \n"
                + "     - Reason    Apache POI in versions prior to release 3.17 are vulnerable to Denial   \n"
                + "                 of Service Attacks: 1) Infinite Loops while parsing crafted WMF, EMF,   \n"
                + "                 MSG and macros (POI bugs 61338 and 61294), and 2) Out of Memory         \n"
                + "                 Exceptions while parsing crafted DOC, PPT and XLS (POI bugs 52372 and   \n"
                + "                 61295).                                                                 \n"
                + "     - Dep.-Ref  https://ossindex.sonatype.org/component/pkg:maven/org.apache.poi/poi-ooxml@3.9?utm_source=dependency-check&utm_medium=integration&utm_content=12.0.1\n"
                + "     - Vul.-Ref  https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Apoi&cpe_version=cpe%3A%2F%3Aapache%3Apoi%3A3.9\n"
                + "\n" 
                + "   + org.apache.poi:poi-ooxml-schemas:3.9 (confidence:HIGH)                              \n"
                + "     - CVE       CVE-2017-12626, CVE-2016-5000, CVE-2017-5644, CVE-2019-12415,           \n"
                + "                 CVE-2022-26336, CVE-2014-9527, CVE-2014-3529, CVE-2014-3574             \n"
                + "     - Severity  HIGH, 7.5, NVD -> fixed by 3.17                                         \n"
                + "     - Included  poi-ooxml:3.9                                                           \n"
                + "     - Reason    Apache POI in versions prior to release 3.17 are vulnerable to Denial   \n"
                + "                 of Service Attacks: 1) Infinite Loops while parsing crafted WMF, EMF,   \n"
                + "                 MSG and macros (POI bugs 61338 and 61294), and 2) Out of Memory         \n"
                + "                 Exceptions while parsing crafted DOC, PPT and XLS (POI bugs 52372 and   \n"
                + "                 61295).                                                                 \n"
                + "     - Dep.-Ref  https://ossindex.sonatype.org/component/pkg:maven/org.apache.poi/poi-ooxml-schemas@3.9?utm_source=dependency-check&utm_medium=integration&utm_content=12.0.1\n"
                + "     - Vul.-Ref  https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Apoi&cpe_version=cpe%3A%2F%3Aapache%3Apoi%3A3.9\n"
                + "\n"
                + "   + org.apache.xmlbeans:xmlbeans:2.3.0 (confidence:HIGH)                                \n"
                + "     - CVE       CVE-2021-23926                                                          \n"
                + "     - Severity  CRITICAL, 9.1, NVD                                                      \n"
                + "     - Included  poi-ooxml:3.9                                                           \n"
                + "     - Reason    The XML parsers used by XMLBeans up to version 2.6.0 did not set the    \n"
                + "                 properties needed to protect the user from malicious XML input.         \n"
                + "                 Vulnerabilities include possibilities for XML Entity Expansion attacks. \n"
                + "                 Affects XMLBeans up to and including v2.6.0.                            \n"
                + "     - Dep.-Ref  https://ossindex.sonatype.org/component/pkg:maven/org.apache.xmlbeans/xmlbeans@2.3.0?utm_source=dependency-check&utm_medium=integration&utm_content=12.0.1\n"
                + "     - Vul.-Ref  https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3Aapache&cpe_product=cpe%3A%2F%3Aapache%3Axmlbeans&cpe_version=cpe%3A%2F%3Aapache%3Axmlbeans%3A2.3.0\n";
        
        assertEquals(ref.replaceAll(CR, ""), result.replaceAll(CR, ""));
    }
}
    

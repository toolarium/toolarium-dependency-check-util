/*
 * StringVulnerabilityReportFormatterTest.java
 *
 * Copyright by toolarium, all rights reserved.
 */
package com.github.toolarium.dependency.check.report;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.github.toolarium.common.util.TextUtil;
import com.github.toolarium.dependency.check.DependencyCheckUtil;
import com.github.toolarium.dependency.check.DependencyCheckUtilTest;
import com.github.toolarium.dependency.check.model.DependecyCheckResult;
import com.github.toolarium.dependency.check.report.format.VulnerabilityReportFormatterFactory;
import com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter;
import java.io.IOException;
import java.nio.file.Paths;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Test the {@link StringVulnerabilityReportFormatter}.
 *  
 * @author patrick
 */
public class StringVulnerabilityReportFormatterTest {
    private static final Logger LOG = LoggerFactory.getLogger(StringVulnerabilityReportFormatterTest.class);

    
    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void formatSimpleReport() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.SAMPLE).toFile());
        assertNotNull(dependecyCheckResult);
        assertTrue(DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, VulnerabilityReportFormatterFactory.getInstance().getStringFormatter(), new String[] {"annotationProcessor"}).isEmpty());
    }

    
    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void formatSimpleVulnerabilityReport() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.FULL_REPORT_1_VULNERABLE).toFile());
        assertNotNull(dependecyCheckResult);
        
        StringVulnerabilityReportFormatter f = VulnerabilityReportFormatterFactory.getInstance().getStringFormatter();
        String result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, f)) {
            result += s;
        }
        LOG.debug(TextUtil.NL + result);
        
        String ref = 
                  " + annotationProcessor:                                                                                                                  \n"
                + "   > com.fasterxml.jackson.core:jackson-databind:2.15.3\n"
                + "     - CVE       CVE-2023-35116                                                                                                          \n"
                + "     - Severity  MEDIUM, 4.7, NVD -> fixed by 2.16.0                                                                                     \n"
                + "     - Included  toolarium-enum-configuration:1.1.8                                                                                      \n"
                + "     - Ref1.     https://ossindex.sonatype.org/component/pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.15.3?utm_source=dependen\n"
                + "                 cy-check&utm_medium=integration&utm_content=9.0.6                                                                       \n"
                + "     - Ref2.     https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=overview&search_type=all&cpe_vendor=cpe%3A%2F%3\n"
                + "                 Afasterxml&cpe_product=cpe%3A%2F%3Afasterxml%3Ajackson-databind&cpe_version=cpe%3A%2F%3Afasterxml%3Ajackson-databind%3A2\n"
                + "                 .15.3                                                                                                                   \n"
                + "     - Reason    jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted \n"
                + "                 object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report,  \n"
                + "                 because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external  \n"
                + "                 attacker.                                                                                                               \n"
                + "";
        
        assertEquals(ref.replaceAll("\r", ""), result.replaceAll("\r", ""));

        result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, f.setEnableReason(false).setEnableReason(false).setEnableUrl(false))) {
            result += s + "\n";
        }
        
        ref = " + annotationProcessor:                                                                                                                  \n"
            + "   > com.fasterxml.jackson.core:jackson-databind:2.15.3\n"
            + "     - CVE       CVE-2023-35116                                                                                                          \n"
            + "     - Severity  MEDIUM, 4.7, NVD -> fixed by 2.16.0                                                                                     \n"
            + "     - Included  toolarium-enum-configuration:1.1.8                                                                                      \n"
            + "\n"
            + "";
                
        
        LOG.debug("\n" + result);
        assertEquals(ref, result);
    }

    
    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void formatMoreComplexCase() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.FULL_REPORT_MULTIPLE_VULNERABILITIES).toFile());
        assertNotNull(dependecyCheckResult);

        DependecyCheckResult simplifiedDependecyCheckResult = DependencyCheckUtil.getInstance().filter(DependencyCheckUtil.getInstance().simplify(dependecyCheckResult));
        assertNotNull(simplifiedDependecyCheckResult);
        
        LOG.debug("" + DependencyCheckUtil.getInstance().toJsonString(simplifiedDependecyCheckResult));


        
        String result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, VulnerabilityReportFormatterFactory.getInstance().getStringFormatter())) {
            result += s + "\n";
        }
        LOG.debug("\n" + result);
    }
}

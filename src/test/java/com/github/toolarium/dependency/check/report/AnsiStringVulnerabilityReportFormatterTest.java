/*
 * AnsiStringVulnerabilityReportFormatterTest.java
 *
 * Copyright by toolarium, all rights reserved.
 */
package com.github.toolarium.dependency.check.report;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import com.github.toolarium.ansi.AnsiColor;
import com.github.toolarium.ansi.color.BackgroundColor;
import com.github.toolarium.ansi.color.ForegroundColor;
import com.github.toolarium.dependency.check.DependencyCheckUtil;
import com.github.toolarium.dependency.check.DependencyCheckUtilTest;
import com.github.toolarium.dependency.check.model.DependecyCheckResult;
import com.github.toolarium.dependency.check.report.format.impl.AnsiStringVulnerabilityReportFormatter;
import java.io.IOException;
import java.nio.file.Paths;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Test {@link AnsiStringVulnerabilityReportFormatter}.
 * 
 * @author patrick
 */
public class AnsiStringVulnerabilityReportFormatterTest {
    private static final Logger LOG = LoggerFactory.getLogger(AnsiStringVulnerabilityReportFormatterTest.class);
    
    
    /**
     * Test
     * 
     * @throws IOException In case of a file error
     */
    @Test
    public void formatMoreComplexCase() throws IOException {
        DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(Paths.get(DependencyCheckUtilTest.TEST_RESOURCE_PATH, DependencyCheckUtilTest.FULL_REPORT_MULTIPLE_VULNERABILITIES).toFile());
        assertNotNull(dependecyCheckResult);

        DependecyCheckResult simplifiedDependecyCheckResult = DependencyCheckUtil.getInstance().filter(DependencyCheckUtil.getInstance().simplify(dependecyCheckResult));
        assertNotNull(simplifiedDependecyCheckResult);
        
        //LOG.debug("" + DependencyCheckUtil.getInstance().toJsonString(simplifiedDependecyCheckResult));

        AnsiStringVulnerabilityReportFormatter f = new AnsiStringVulnerabilityReportFormatter(AnsiColor.ON);
        f.setArtifactColor(ForegroundColor.CYAN.name(), null);
        f.setConfigurationColor(ForegroundColor.YELLOW.name(), null);
        f.setConfidenceColor(ForegroundColor.YELLOW.name(), null);
        f.setSeverityColor(ForegroundColor.YELLOW.name(), null);
        f.setCveColor(ForegroundColor.WHITE.name(), BackgroundColor.RED.name());
        f.setIncludedByColor(ForegroundColor.LIGHT_YELLOW.name(), null);
        f.setEndExcludingVersionColor(ForegroundColor.WHITE.name(), null);
        f.setReasonColor(ForegroundColor.GREEN.name(), null);
        f.setUrlColor(ForegroundColor.LIGHT_BLUE.name(), null);

        String result = "";
        for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(dependecyCheckResult, f)) {
            result += s + "\n";
        }
        
        LOG.debug("\n" + result);
    }

}

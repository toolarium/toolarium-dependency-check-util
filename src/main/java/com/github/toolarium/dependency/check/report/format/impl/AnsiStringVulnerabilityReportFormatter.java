/*
 * AnsiStringVulnerabilityReportFormatter.java
 *
 * Copyright by toolarium, all rights reserved.
 */
package com.github.toolarium.dependency.check.report.format.impl;

import com.github.toolarium.ansi.AnsiColor;
import com.github.toolarium.ansi.AnsiString;
import com.github.toolarium.ansi.AnsiStringBuilder;
import com.github.toolarium.ansi.color.BackgroundColor;
import com.github.toolarium.ansi.color.ForegroundColor;
import com.github.toolarium.common.util.EnumUtil;
import com.github.toolarium.dependency.check.report.format.IVulnerabilityReportFormatter;


/**
 * Implements a string based {@link IVulnerabilityReportFormatter}.
 * 
 * @author patrick
 */
public class AnsiStringVulnerabilityReportFormatter extends StringVulnerabilityReportFormatter {
    private AnsiColor ansiColor;
    private ForegroundColor artifactColor;
    private BackgroundColor artifactBgColor;
    private ForegroundColor configurationColor;
    private BackgroundColor configurationBgColor;
    private ForegroundColor confidenceColor;
    private BackgroundColor confidenceBgColor;
    private ForegroundColor severityColor;
    private BackgroundColor severityBgColor;
    private ForegroundColor cveColor;
    private BackgroundColor cveBgColor;
    private ForegroundColor includedByColor;
    private BackgroundColor includedByBgColor;
    private ForegroundColor endExcludingVersionColor;
    private BackgroundColor endExcludingVersionBgColor;
    private ForegroundColor urlColor;
    private BackgroundColor urlBgColor;
    private ForegroundColor reasonColor;
    private BackgroundColor reasonBgColor;

    
    /**
     * Constructor for ColorizedStringVulnerabilityReportFormatter
     * 
     * @param ansiColor the ansi color
     */
    public AnsiStringVulnerabilityReportFormatter(AnsiColor ansiColor) {
        this.ansiColor = ansiColor;
    }

    
    /**
     * Set the artifact color
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setArtifactColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            artifactColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            artifactBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }


    /**
     * Set the configuration color 
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setConfigurationColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            configurationColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            configurationBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }

    
    /**
     * Set the confidence color 
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setConfidenceColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            confidenceColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            confidenceBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }

    
    /**
     * Set the severity color 
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setSeverityColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            severityColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            severityBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }
    

    
    /**
     * Set the ce color 
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setCveColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            cveColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            cveBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }

    
    /**
     * Set the included by color 
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setIncludedByColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            includedByColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            includedByBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }

    
    /**
     * Set the end excluding version color 
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setEndExcludingVersionColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            endExcludingVersionColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            endExcludingVersionBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }

    
    /**
     * Set the end excluding version color 
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setUrlColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            urlColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            urlBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }

    
    /**
     * Set reason color 
     *
     * @param foregroundColorName the foreground color name
     * @param backgroundColorName the background color name
     */
    public void setReasonColor(String foregroundColorName, String backgroundColorName) {
        if (foregroundColorName != null) {
            reasonColor = EnumUtil.getInstance().valueOf(ForegroundColor.class, foregroundColorName);
        }
        
        if (backgroundColorName != null) {
            reasonBgColor = EnumUtil.getInstance().valueOf(BackgroundColor.class, backgroundColorName);
        }
    }

    
    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#artefactName(java.lang.String)
     */
    @Override
    protected String artefactName(String artifactId) {
        if (artifactColor != null && artifactBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(artifactId, artifactColor, artifactBgColor);
        } else if (artifactColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(artifactId, artifactColor);
        } else if (artifactBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(artifactId, artifactBgColor);
        }
        
        return artifactId;
    }


    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#configurationName(java.lang.String)
     */
    @Override
    protected String configurationName(String configuration) {
        if (configurationColor != null && configurationBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(configuration, configurationColor, configurationBgColor);
        } else if (configurationColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(configuration, configurationColor);
        } else if (configurationBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(configuration, configurationBgColor);
        }
        
        return configuration;
    }
    

    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#confidence(java.lang.String)
     */
    @Override
    protected String confidence(String confidence) {
        if (confidenceColor != null && confidenceBgColor != null) {
            return " (confidence:" + AnsiString.getInstance(ansiColor).appendWithColor(confidence, confidenceColor, confidenceBgColor) + ")";
        } else if (severityColor != null) {
            return " (confidence:" + AnsiString.getInstance(ansiColor).appendWithColor(confidence, confidenceColor) + ")";
        } else if (confidenceBgColor != null) {
            return " (confidence:" + AnsiString.getInstance(ansiColor).appendWithColor(confidence, confidenceBgColor) + ")";
        }
        
        return super.confidence(confidence);
    }


    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#severity(java.lang.String, java.lang.Double, java.lang.String)
     */
    @Override
    protected String severity(String severity, Double score, String source) {
        StringBuilder builder = new StringBuilder();
        if (exist(severity)) {
            builder.append(severityEntry(severity));
        }

        if (score != null) {
            builder.append(", ").append(severityEntry(score.toString()));
        }

        if (exist(source)) {
            builder.append(", ").append(severityEntry(source));
        }
        
        return builder.toString();
    }


    /**
     * Set the severity entry
     *
     * @param entry the entry
     * @return the entry
     */
    private String severityEntry(String entry) {
        if (severityColor != null && severityBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(entry, severityColor, severityBgColor);
        } else if (severityColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(entry, severityColor);
        } else if (severityBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(entry, severityBgColor);
        }
        
        return entry;
    }
    
    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#cve(java.lang.String)
     */
    @Override
    protected String cve(String cve) {
        if (cveColor != null && cveBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(cve, cveColor, cveBgColor);
        } else if (cveColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(cve, cveColor);
        } else if (cveBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(cve, cveBgColor);
        }
        
        return cve;
    }
    

    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#includedBy(java.lang.String, java.lang.String)
     */
    @Override
    protected String includedBy(String includedBy, String version) {
        String result = includedBy + ":" + version;
        if (includedByColor != null && includedByBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(result, includedByColor, includedByBgColor);
        } else if (includedByColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(result, includedByColor);
        } else if (includedByBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(result, includedByBgColor);
        }
        
        return result;
    }


    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#endExcludingVersion(java.lang.String)
     */
    @Override
    protected String endExcludingVersion(String version) {
        String result = " -> fixed by " + version;
        if (endExcludingVersionColor != null && endExcludingVersionBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(result, endExcludingVersionColor, endExcludingVersionBgColor);
        } else if (endExcludingVersionColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(result, endExcludingVersionColor);
        } else if (endExcludingVersionBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(result, endExcludingVersionBgColor);
        }
        
        return result;
    }


    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#url(java.lang.String)
     */
    @Override
    protected String url(String url) {
        if (urlColor != null && urlBgColor != null) {
            String prepareUrl = AnsiString.getInstance(ansiColor).appendWithColor(url, urlColor, urlBgColor);
            return new AnsiStringBuilder().setAnsiColor(ansiColor).italic().underline().append(prepareUrl).reset().toString();
        } else if (urlColor != null) {
            String prepareUrl = AnsiString.getInstance(ansiColor).appendWithColor(url, urlColor);
            return new AnsiStringBuilder().setAnsiColor(ansiColor).italic().underline().append(prepareUrl).reset().toString();
        } else if (urlBgColor != null) {
            String prepareUrl = AnsiString.getInstance(ansiColor).appendWithColor(url, urlBgColor);
            return new AnsiStringBuilder().setAnsiColor(ansiColor).italic().underline().append(prepareUrl).reset().toString();
        }

        return super.url(url);
    }

    
    /**
     * @see com.github.toolarium.dependency.check.report.format.impl.StringVulnerabilityReportFormatter#reason(java.lang.String)
     */
    @Override
    protected String reason(String reason) {
        if (reasonColor != null && reasonBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(reason, reasonColor, reasonBgColor);
        } else if (reasonColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(reason, reasonColor);
        } else if (reasonBgColor != null) {
            return AnsiString.getInstance(ansiColor).appendWithColor(reason, reasonBgColor);
        }
        
        return super.reason(reason);
    }
}

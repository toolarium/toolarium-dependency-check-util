/*
 * VulnerabilityResult.java
 *
 * Copyright by toolarium, all rights reserved.
 */
package com.github.toolarium.dependency.check.report;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;


/**
 * Defines the vulnerability report
 * 
 * @author patrick
 */
public class VulnerabilityReport {
    private DependencyArtifact projectArtifact;
    private String reportDate;
    private Map<String, List<Dependency>> vulneabilities;

    
    /**
     * Constructor for VulnerabilityResult
     * 
     * @param reportDate the report date
     * @param projectArtifact the project artifact;
     */
    public VulnerabilityReport(String reportDate, DependencyArtifact projectArtifact) {
        this.reportDate = reportDate;
        this.projectArtifact = projectArtifact;
        this.vulneabilities = new ConcurrentHashMap<String, List<Dependency>>();
    }
    
    
    /**
     * Get the report date
     *
     * @return the report date
     */
    public String getReportDate() {
        return reportDate;
    }

    
    /**
     * Get the report date
     *
     * @param reportDate the report date
     */
    public void setReportDate(String reportDate) {
        this.reportDate = reportDate;
    }

    
    /**
     * Get the project artifact
     *
     * @return project artifact
     */
    public DependencyArtifact getProjectArtifact() {
        return projectArtifact;
    }
    
    
    /**
     * Set the project artifact
     *
     * @param projectArtifact the project artifact
     */
    public void setProjectArtifact(DependencyArtifact projectArtifact) {
        this.projectArtifact = projectArtifact;
    }
    
    
    /**
     * Add a vulnerability
     *
     * @param configuration the configuration
     * @param vulnerability the vulnerability
     */
    public void add(String configuration, Dependency vulnerability) {
        List<Dependency> vulnerabilityList = vulneabilities.get(configuration);
        if (vulnerabilityList == null) {
            vulnerabilityList = new ArrayList<Dependency>();
            vulneabilities.put(configuration, vulnerabilityList);
        }
        
        vulnerabilityList.add(vulnerability);
    }
    
    
    /**
     * Get the vulnerabilities
     *
     * @param configuration the configuration
     * @return the vulnerabilities
     */
    public List<Dependency> getVulnerabilities(String configuration) {
        return vulneabilities.get(configuration);
    }

    
    /**
     * Get the vulnerability configuration set
     *
     * @return the vulnerability configuration set
     */
    public Set<String> getVulnerabilityConfigurations() {
        return vulneabilities.keySet();
    }

    
    /**
     * Get the most critical vulnerability
     *
     * @return the most critical vulnerability
     */
    public Vulnerability getMostCrititcalVulnerability() {
        List<Vulnerability> list = new ArrayList<Vulnerability>();
        for (String name : getVulnerabilityConfigurations()) {
            list.add(getMostCrititcalVulnerability(name));
        }
        
        list.sort(Comparator.comparing(Vulnerability::getScore).reversed());
        return list.get(0);
    }

    
    /**
     * Get the most critical vulnerability
     *
     * @param configuration the configuration
     * @return the most critical vulnerability
     */
    public Vulnerability getMostCrititcalVulnerability(String configuration) {
        List<Vulnerability> list = new ArrayList<Vulnerability>();
        for (Dependency d : vulneabilities.get(configuration)) {
            list.add(d.getMostCrititcalVulnerability());
        }
        
        list.sort(Comparator.comparing(Vulnerability::getScore).reversed());
        return list.get(0);
    }

    
    /**
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        return Objects.hash(projectArtifact, reportDate, vulneabilities);
    }


    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        
        if (obj == null) {
            return false;
        }
        
        if (getClass() != obj.getClass()) {
            return false;
        }
        
        VulnerabilityReport other = (VulnerabilityReport) obj;
        return Objects.equals(projectArtifact, other.projectArtifact) && Objects.equals(reportDate, other.reportDate)
                && Objects.equals(vulneabilities, other.vulneabilities);
    }


    /**
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return "VulnerabilityResult [projectArtifact=" + projectArtifact + ", reportDate=" + reportDate
                + ", vulneabilities=" + vulneabilities + "]";
    }
}

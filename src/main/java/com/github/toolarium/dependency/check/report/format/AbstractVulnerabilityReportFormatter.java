/*
 * AbstractVulnerabilityReportFormatter.java
 *
 * Copyright by toolarium, all rights reserved.
 */
package com.github.toolarium.dependency.check.report.format;

import com.github.toolarium.dependency.check.report.VulnerabilityReport;
import java.util.Collection;


/**
 * Defines the base class for vulnerability report formatters.
 * 
 * @author patrick
 */
public abstract class AbstractVulnerabilityReportFormatter<T> implements IVulnerabilityReportFormatter<T> {
    
    
    /**
     * @see com.github.toolarium.dependency.check.report.format.IVulnerabilityReportFormatter#format(com.github.toolarium.dependency.check.report.VulnerabilityReport, java.lang.String)
     */
    @Override
    public T format(VulnerabilityReport vulnerabilityReport, String configuration) { 
        if (!hasVulnerability(vulnerabilityReport, configuration)) {
            return null;
        }
        
        return null;
    }
    
    
    /**
     * Validate if it hAS vulnerability to process 
     *
     * @param vulnerabilityReport the vulnerability report
     * @param configuration the configuration
     * @return true if it has data to process
     */
    protected boolean hasVulnerability(VulnerabilityReport vulnerabilityReport, String configuration) {
        return (vulnerabilityReport != null && vulnerabilityReport.getVulnerabilities(configuration) != null);
    }
    
    
    /**
     * Check if it exist or not
     *
     * @param value the string
     * @return true if it exist
     */
    protected boolean exist(String value) {
        return (value != null && !value.isBlank());
    }


    /**
     * Check if it exist or not
     *
     * @param collection the collection
     * @return true if it exist
     */
    protected boolean exist(Collection<?> collection) {
        return (collection != null && !collection.isEmpty());
    }
}

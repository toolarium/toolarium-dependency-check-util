/*
 * StringVulnerabilityReportFormatter.java
 *
 * Copyright by toolarium, all rights reserved.
 */
package com.github.toolarium.dependency.check.report.format.impl;

import com.github.toolarium.common.util.StringUtil;
import com.github.toolarium.common.util.TextUtil;
import com.github.toolarium.dependency.check.report.Dependency;
import com.github.toolarium.dependency.check.report.DependencyArtifact;
import com.github.toolarium.dependency.check.report.Vulnerability;
import com.github.toolarium.dependency.check.report.VulnerabilityReport;
import com.github.toolarium.dependency.check.report.format.IVulnerabilityReportFormatter;


/**
 * Implements a string based {@link IVulnerabilityReportFormatter}.
 * 
 * @author patrick
 */
public class StringVulnerabilityReportFormatter extends AbstractVulnerabilityReportFormatter<String> {
    private static final String CVE_TITLE = "CVE";
    private static final String SEVERITY_TITLE = "Severity";
    private static final String INCLUDED_BY_TITLE = "Included";
    private static final String DEPENDECY_URL_TITLE = "Ref1.";
    private static final String VULNERABILITY_REFERENCE_URL_TITLE = "Ref2.";
    private static final String REASON_TITLE = "Reason";
    private boolean enableConfidence = false;
    private boolean enableReason = true;
    private boolean enableUrl = true;
    private String configurationStart = "+";
    private String entryStart = ">";
    private String subEntryStart = "-";
    private String indent = TextUtil.SPACE;
    private String contentStartSeparator = TextUtil.SPACE;
    private int maxTextLen = 120;
    private int titleMaxLen = 10;

    
    /**
     * Constructor for StringVulnerabilityReportFormatter
     */
    public StringVulnerabilityReportFormatter() {
    }
    
    
    /**
     * Set enable confidence
     *
     * @param enableConfidence enable confidence
     * @return this object
     */
    public StringVulnerabilityReportFormatter setEnableConfidence(boolean enableConfidence) {
        this.enableConfidence = enableConfidence;
        return this;
    }

    
    /**
     * Set enable reason
     *
     * @param enableReason enable reason
     * @return this object
     */
    public StringVulnerabilityReportFormatter setEnableReason(boolean enableReason) {
        this.enableReason = enableReason;
        return this;
    }

    
    /**
     * Set enable url
     *
     * @param enableUrl enable url
     * @return this object
     */
    public StringVulnerabilityReportFormatter setEnableUrl(boolean enableUrl) {
        this.enableUrl = enableUrl;
        return this;
    }

    
    /**
     * Set the configuration start header
     *
     * @param configurationStart the configuration start header
     * @return this object
     */
    public StringVulnerabilityReportFormatter setConfigurationStart(String configurationStart) {
        this.configurationStart = configurationStart;
        return this;
    }

    
    /**
     * Set the entry start header
     *
     * @param entryStart the entry start header
     * @return this object
     */
    public StringVulnerabilityReportFormatter setEntryStart(String entryStart) {
        this.entryStart = entryStart;
        return this;
    }

    
    /**
     * Set the sub entry start header
     *
     * @param subEntryStart the sub entry start header
     * @return this object
     */
    public StringVulnerabilityReportFormatter setSubEntryStart(String subEntryStart) {
        this.subEntryStart = subEntryStart;
        return this;
    }

    
    /**
     * Set the indent
     *
     * @param indent the indent
     * @return this object
     */
    public StringVulnerabilityReportFormatter setIndent(String indent) {
        this.indent = indent;
        return this;
    }

    
    /**
     * Set the title max len
     *
     * @param titleMaxLen the title max len
     * @return this object
     */
    public StringVulnerabilityReportFormatter setTitleMaxLen(int titleMaxLen) {
        this.titleMaxLen = titleMaxLen;
        return this;
    }

    
    /**
     * Set the max text len
     *
     * @param maxTextLen the max text len
     * @return this object
     */
    public StringVulnerabilityReportFormatter setMaxTextLen(int maxTextLen) {
        this.maxTextLen = maxTextLen;
        return this;
    }

    
    /**
     * Set the content start separator
     *
     * @param contentStartSeparator the content start separator
     * @return this object
     */
    public StringVulnerabilityReportFormatter contentStartSeparator(String contentStartSeparator) {
        this.contentStartSeparator = contentStartSeparator;
        return this;
    }

    
    /**
     * @see com.github.toolarium.dependency.check.report.format.IVulnerabilityReportFormatter#format(com.github.toolarium.dependency.check.report.VulnerabilityReport, java.lang.String)
     */
    @Override
    public String format(VulnerabilityReport vulnerabilityReport, String configuration) { 
        if (!hasVulnerability(vulnerabilityReport, configuration)) {
            return null;
        }
        
        final StringBuilder dependencyIndent = createDependencyIndent();
        final StringBuilder entryIndent = createEntryIndent(dependencyIndent);
        final StringBuilder subEntryIndent = createSubEntryIndent(entryIndent);
        
        StringBuilder builder = new StringBuilder();
        builder.append(indent).append(configurationStart).append(contentStartSeparator).append(configurationName(configuration)).append(":");
        builder.append(StringUtil.getInstance().newString(TextUtil.SPACE, (subEntryIndent.length() + maxTextLen + titleMaxLen) - builder.length())).append(TextUtil.NL);
        
        int counter = 0;
        for (Dependency dependency : vulnerabilityReport.getVulnerabilities(configuration)) {
            if (counter > 0) {
                builder.append(TextUtil.NL);
            }
            counter++;
            
            // add entry
            // ignore: vulnerability.getFilename(); 
            builder.append(indent).append(dependencyIndent).append(entryStart).append(contentStartSeparator).append(artefactName(dependency.getDependencyArtifact().toArtifactId()));
            if (enableConfidence && exist(dependency.getConfidence())) {
                builder.append(confidence(dependency.getConfidence()));
            }

            // ignore: vulnerability.getPackageDescription() & vulnerability.getPackageLicence();
            
            //builder.append(StringUtil.getInstance().newString(TextUtil.SPACE, (subEntryIndent.length() + maxTextLen + titleMaxLen) - indent.length() - dependencyIndent.length() - entryStart.length())).append(TextUtil.NL);
            
            builder.append(TextUtil.NL);

            // add cve list
            Vulnerability mostCrititcalVulnerability = createCveList(builder, subEntryIndent, dependency);
            
            builder.append(createSeverity(subEntryIndent, mostCrititcalVulnerability)).append(TextUtil.NL);

            // included by
            builder.append(createIncludedBy(subEntryIndent, dependency));

            // url references
            if (enableUrl) {
                if (exist(dependency.getUrl())) {
                    builder.append(TextUtil.getInstance().blockText(subEntryIndent, new StringBuilder(DEPENDECY_URL_TITLE), titleMaxLen, new StringBuilder(url(dependency.getUrl())), maxTextLen)).append(TextUtil.NL);
                }
                
                if (exist(mostCrititcalVulnerability.getUrl())) {
                    builder.append(TextUtil.getInstance().blockText(subEntryIndent, new StringBuilder(VULNERABILITY_REFERENCE_URL_TITLE), titleMaxLen, new StringBuilder(url(mostCrititcalVulnerability.getUrl())), maxTextLen)).append(TextUtil.NL);
                }
            }

            // reason
            if (enableReason) {
                if (exist(mostCrititcalVulnerability.getDescription())) {
                    builder.append(TextUtil.getInstance().blockText(subEntryIndent, new StringBuilder(REASON_TITLE), titleMaxLen, new StringBuilder(reason(mostCrititcalVulnerability.getDescription())), maxTextLen)).append(TextUtil.NL);
                }
            }
    
            // software reference
            /*
            if (exist(vulnerability.getProjectReferenceList())) {
                for (String reference : vulnerability.getProjectReferenceList()) {
                    builder.append(header).append(reference).append(NL);
                }
            }
            */
        }
        
        return builder.toString();
    }

    
    /**
     * Create cve list
     * 
     * @param builder the builder
     * @param subEntryIndent the sub entry ident
     * @param dependency the dependency
     * @return the most critical vulnerability
     */
    protected Vulnerability createCveList(StringBuilder builder, final StringBuilder subEntryIndent, Dependency dependency) {
        final StringBuilder cveList = new StringBuilder();
        Vulnerability mostCrititcalVulnerability = null;
        if (dependency.getVulnerabilityList().size() == 1) {
            mostCrititcalVulnerability = dependency.getVulnerabilityList().get(0);
            if (exist(mostCrititcalVulnerability.getCve())) {
                cveList.append(cve(mostCrititcalVulnerability.getCve()));
            }
        } else {
            int i = 0;
            for (Vulnerability vulnerability : dependency.getVulnerabilityList()) {
                if (i > 0) {
                    cveList.append(", ");
                }
                
                if (exist(vulnerability.getCve())) {
                    cveList.append(cve(vulnerability.getCve()));
                    i++;
                }
                
                if (mostCrititcalVulnerability == null || (mostCrititcalVulnerability.getScore() != null && mostCrititcalVulnerability.getScore().doubleValue() < vulnerability.getScore().doubleValue())) {
                    mostCrititcalVulnerability = vulnerability;
                }
            }                
        }

        builder.append(TextUtil.getInstance().blockText(subEntryIndent, new StringBuilder(CVE_TITLE), titleMaxLen, cveList, maxTextLen)).append(TextUtil.NL);
        return mostCrititcalVulnerability;
    }

    
    /**
     * Create severity
     * 
     * @param subEntryIndent the sub entry ident
     * @param vulnerability the vulnerability
     * @return the builder
     */
    protected StringBuilder createSeverity(StringBuilder subEntryIndent, Vulnerability vulnerability) {
        StringBuilder builder = new StringBuilder();
        
        builder.append(severity(vulnerability.getSeverity(), vulnerability.getScore(), vulnerability.getSource()));

        if (exist(vulnerability.getEndExcludingVersion())) {
            builder.append(endExcludingVersion(vulnerability.getEndExcludingVersion())).append(TextUtil.NL);
        } else {
            builder.append(TextUtil.NL);
        }

        return TextUtil.getInstance().blockText(subEntryIndent, new StringBuilder(SEVERITY_TITLE), titleMaxLen, builder, maxTextLen);
    }
    
    
    /**
     * Create included by
     * 
     * @param subEntryIndent the sub entry ident
     * @param dependency the dependency
     * @return the builder
     */
    protected StringBuilder createIncludedBy(StringBuilder subEntryIndent, Dependency dependency) {
        StringBuilder builder = new StringBuilder();

        if (exist(dependency.getIncludedByReferenceList())) {
            int i = 0;
            for (DependencyArtifact d : dependency.getIncludedByReferenceList()) {
                if (i > 0) {
                    builder.append(", ");
                }
                builder.append(includedBy(d.getName(), d.getVersion()));
                i++;
            }

            return TextUtil.getInstance().blockText(subEntryIndent, new StringBuilder(INCLUDED_BY_TITLE), titleMaxLen, builder, maxTextLen).append(TextUtil.NL);
        }
        return builder;
    }
    
    
    /**
     * Create dependency indention
     * 
     * @return the prepared string builder
     */
    protected StringBuilder createDependencyIndent() {
        StringBuilder dependencyIndent = new StringBuilder();
        for (int i = 0; i < configurationStart.length() + contentStartSeparator.length(); i++) {
            dependencyIndent.append(TextUtil.SPACE);
        }
        
        return dependencyIndent;
    }


    /**
     * Create entry indention
     * 
     * @param dependencyIndent the depndency indention
     * @return the prepared string builder
     */
    protected StringBuilder createEntryIndent(StringBuilder dependencyIndent) {
        StringBuilder subEntryIndent = new StringBuilder();
        for (int i = 0; i < entryStart.length(); i++) {
            subEntryIndent.append(TextUtil.SPACE);
        }
        
        subEntryIndent.append(dependencyIndent).append(contentStartSeparator);
        return subEntryIndent;
    }

    
    /**
     * Create sub entry indention
     * 
     * @param entryIndent the entry indention
     * @return the prepared string builder
     */
    protected StringBuilder createSubEntryIndent(StringBuilder entryIndent) {
        return new StringBuilder().append(indent).append(entryIndent).append(subEntryStart).append(contentStartSeparator);
    }

    
    /**
     * Artifact id
     * 
     * @param artifactId the artifact id
     * @return the artifact id
     */
    protected String artefactName(String artifactId) {
        return artifactId;
    }


    /**
     * Configuration name
     * 
     * @param configuration the configuration name
     * @return the configuration name
     */
    protected String configurationName(String configuration) {
        return configuration;
    }
    

    /**
     * Confidence
     * 
     * @param confidence the confidence
     * @return the confidence
     */
    protected String confidence(String confidence) {
        return " (confidence:" + confidence + ")";
    }

    
    /**
     * Severity
     * 
     * @param severity the severity
     * @param score the score
     * @param source the source
     * @return the severity
     */
    protected String severity(String severity, Double score, String source) {
        
        StringBuilder builder = new StringBuilder();
        if (exist(severity)) {
            builder.append(severity);
        }

        if (score != null) {
            builder.append(", ").append(score);
        }

        if (exist(source)) {
            builder.append(", ").append(source);
        }
        
        return builder.toString();
    }

    
    /**
     * The cve
     * 
     * @param cve the cve
     * @return the cve
     */
    protected String cve(String cve) {
        return cve;
    }
    

    /**
     * Included by
     * 
     * @param includedBy included by
     * @param version the version
     * @return included by
     */
    protected String includedBy(String includedBy, String version) {
        return includedBy + ":" + version;
    }
    
    
    /**
     * End excluding version
     * 
     * @param version the end excluding version
     * @return included by
     */
    protected String endExcludingVersion(String version) {
        return " -> fixed by " + version;
    }


    /**
     * Url
     *
     * @param url the url
     * @return the url
     */
    protected String url(String url) {
        return url;
    }


    /**
     * reason
     *
     * @param reason the reson
     * @return the reson
     */
    protected String reason(String reason) {
        return reason;
    }
}
